#trigger github action again
name: Terraform Deployment

on:
    push:
      branches:
        - main
    pull_request:
      branches:
        - main
  
jobs:
  deploy-cluster:
    runs-on: ubuntu-latest

    env:

        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}

        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: eu-north-1

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      run: TF_LOG=DEBUG terraform init #-reconfigure

    - name: Terraform format
      run: terraform fmt
    
    - name: Terraform validate
      run: terraform validate

    - name: Terraform Plan
      run: terraform plan

    - name: Create master node first
      if: github.ref == 'refs/heads/main'
      run: |
        set -e
        terraform apply -target=aws_eks_cluster.eks_cluster -auto-approve || (echo "Terraform apply failed! Destroying resources..." && terraform destroy -auto-approve && exit 1)
    
    - name: Install AWS CLI (if missing)
      run: |
        if ! command -v aws &> /dev/null; then
          echo "Installing AWS CLI..."
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
        else
          echo "AWS CLI is already installed."
        fi

    - name: Verify AWS Identity
      run: aws sts get-caller-identity

    - name: Generate kubeconfig
      run: |
        mkdir -p /home/runner/.kube
        aws eks update-kubeconfig --region eu-north-1 --name minimal-eks-cluster --kubeconfig /home/runner/.kube/config
      env:
        KUBECONFIG: /home/runner/.kube/config

    - name: Check EKS Cluster Status
      run: aws eks describe-cluster --name minimal-eks-cluster --query "cluster.status"

    - name: Debug kubeconfig Path
      run: |
        ls -lah /home/runner/.kube
        cat /home/runner//.kube/config || echo "❌ kubeconfig file not found!"

    - name: Upload kubeconfig as an artifact
      uses: actions/upload-artifact@v4   #artifact v3 has deprecated
      with:
        name: kubeconfig
        path: /home/runner/.kube/config
  
  deploy-worknode:
    runs-on: ubuntu-latest
    needs: deploy-cluster
    env:

        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}

        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: eu-north-1

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Download kubeconfig
        uses: actions/download-artifact@v4
        with:
          name: kubeconfig
          path: /home/runner/.kube/

      - name: Check if kubeconfig exists
        run: |
          if [ -f "/home/runner/.kube/config" ]; then
            echo "✅ kubeconfig exists!"
            cat /home/runner/.kube/config
          else
            echo "❌ kubeconfig was NOT created!"
            exit 1
          fi

      - name: Set KUBECONFIG Environment Variable
        run: echo "KUBECONFIG=/home/runner/.kube/config" >> $GITHUB_ENV

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Verify kubectl Access and eks api
        run: |
          kubectl config view --minify
          curl -k $(kubectl config view --minify -o jsonpath='{.clusters[0].cluster.server}')/version


      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
  
      - name: Terraform Init
        run: TF_LOG=DEBUG terraform init #-reconfigure
  
      - name: Terraform format
        run: terraform fmt
      
      - name: Terraform validate
        run: terraform validate
  
      - name: Terraform Plan
        run: terraform plan
        env:
          KUBECONFIG: /home/runner/.kube/config

      - name: Apply Worker Nodes & Kubernetes Resources
        run: terraform apply -auto-approve

      - name: Verify EKS Node Group Status
        run: aws eks describe-nodegroup --cluster-name minimal-eks-cluster --nodegroup-name minimal-node-group
      
      - name: Test EKS Nodes
        run: |
          kubectl get nodes || echo "❌ Nodes not found! Possible failure in joining the cluster."
          kubectl get configmap aws-auth -n kube-system -o yaml
      
      - name: Check Node Status
        id: check_nodes
        run: |
            READY_NODES=$(kubectl get nodes --no-headers | grep -c " Ready")
            TOTAL_NODES=$(kubectl get nodes --no-headers | wc -l)
  
            echo "Ready Nodes: $READY_NODES / $TOTAL_NODES"
  
            if [[ "$READY_NODES" -lt "$TOTAL_NODES" ]]; then
              echo "status=fail" >> $GITHUB_ENV
            else
              echo "status=ok" >> $GITHUB_ENV
            fi
  
      - name: Check Node <-> Master Connectivity
        id: check_connectivity
        run: |
            MASTER_URL=$(aws eks describe-cluster --name minimal-eks-cluster --query "cluster.endpoint" --output text)
            
            if nc -zv $(echo $MASTER_URL | sed 's~https://~~') 443; then
              echo "connectivity=ok" >> $GITHUB_ENV
            else
              echo "connectivity=fail" >> $GITHUB_ENV
            fi
  
      - name: Check EKS node readiness
        if: ${{ env.status == 'fail' || env.connectivity == 'fail' }}
        run: |
              echo "Node health check failed, destroying cluster..."
              exit 1

      - name: Check CNI Plugin and CoreDNS readiness
        run: |
          echo "Waiting for CNI and CoreDNS to be ready (Max: 5 min)..."
          TIMEOUT=300  # 5 minutes in seconds
          ELAPSED=0

          while true; do
            if kubectl get pods -n kube-system | grep -E "coredns|aws-node" | grep Running; then
              echo "CNI and CoreDNS are ready!"
              exit 0
            fi

            if [ "$ELAPSED" -ge "$TIMEOUT" ]; then
              echo "❌ Timeout reached: CNI and CoreDNS did not become ready within 5 minutes."
              exit 1
            fi

            echo "Waiting..."
            sleep 10
            ELAPSED=$((ELAPSED + 10))
          done
          
          
          

      - name: Verify function of coredns
        run: |
           echo "Checking CoreDNS status..."
           kubectl get pods -n kube-system -l k8s-app=kube-dns -o jsonpath='{.items[*].status.conditions[?(@.type=="Ready")].status}'
      #       COREDNS_STATUS=$(kubectl get pods -n kube-system -l k8s-app=kube-dns -o jsonpath='{.items[*].status.conditions[?(@.type=="Ready")].status}'| tr ' ' '\n'| sort | uniq)
              #return true true deduplicate the value before processing it
      #       if [[ "$COREDNS_STATUS" != "True" ]]; then
      #         echo "❌ CoreDNS is NOT running!"
      #         kubectl get pods -n kube-system
      #         exit 1
      #       fi
            
      #       echo "✅ CoreDNS is running!"
  
  cleanup:
    #if: failure()
    if: always()
    needs: deploy-worknode
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init

      - name: Terraform Destroy
        run: terraform destroy -auto-approve